{"version":3,"sources":["assets/pokeball.png","components/home/PokeSearch.js","components/home/PokeCard.js","apis/pokeapi.js","components/home/PokeHome.js","components/details/PokeDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PokeSearch","state","searchTerm","filteredSearchTerm","toDetail","onInputChange","e","_this$props","_this","props","pokemonNames","filterSearch","value","target","console","log","length","regex","RegExp","concat","sort","filter","item","test","setState","onFormSubmit","preventDefault","_this$state","this","react_default","a","createElement","react_router","to","className","href","style","paddingLeft","onSubmit","width","type","id","onChange","autocomplete","placeholder","required","forHtml","Component","Sprite","styled","img","_templateObject","Card","div","_templateObject2","CardList","_templateObject3","PokeCard","name","image","pokemonId","imageLoading","url","split","_this2","react_router_dom","textDecoration","color","class","src","alt","onLoad","display","padding","borderBottomLeftRadius","borderBottomRightRadius","toLowerCase","map","letter","charAt","toUpperCase","substring","join","axios","create","baseURL","PokeHome","originalPokemonList","filteredPokemonList","newFilteredList","eachPokemon","includes","push","pokeapi","get","res","pokemonList","data","react","home_PokeSearch","pokemon","home_PokeCard","key","TYPE_COLORS","bug","dark","dragon","electric","fairy","fighting","fire","flying","ghost","grass","ground","ice","normal","poison","psychic","rock","steel","water","TypeBadge","PokeDetail_templateObject","PokeDetail","types","height","weight","description","isLoading","pokemonName","match","params","pokemon_URL","pokemonSpecies_URL","pokemonData","pokemonSpeciesData","_ref","Math","round","flavor_text_entries","some","entry","language","flavor_text","marginTop","fontSize","react_poke_sprites_default","pokeball","backgroundColor","fontWeight","borderColor","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aaeb1331.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.79a69650.png\";","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\n\nclass PokeSearch extends Component {\n  state = {\n    searchTerm: '',\n    filteredSearchTerm: [],\n    toDetail: false\n  }\n\n  onInputChange = (e) => {\n    const { pokemonNames, filterSearch } = this.props;\n    const value = e.target.value\n    console.log('pokemonNames', pokemonNames)\n\n    let filteredSearchTerm;\n\n    if (value.length > 0) {\n      const regex = new RegExp(`^${value}`, 'i');\n      filteredSearchTerm = pokemonNames.sort().filter((item) => regex.test(item));\n\n      this.setState({\n        searchTerm: value,\n        filteredSearchTerm\n      });\n    } else {\n      this.setState({\n        searchTerm: '',\n        filteredSearchTerm: []\n      })\n    }\n\n    filterSearch(filteredSearchTerm);\n  }\n\n  onFormSubmit = (e) => {\n    e.preventDefault();\n\n    this.setState({\n      toDetail: true\n    });\n  }\n\n  render() {\n    const { searchTerm, toDetail } = this.state;\n\n    if (toDetail) {\n      return <Redirect to={`pokemon/${searchTerm}`} />\n    };\n\n    return (\n      <div className=\"navbar-fixed\">\n        <nav>\n          <div className=\"nav-wrapper red darken-2\">\n            <a href=\"/\" className=\"brand-logo left\" style={{ paddingLeft: \"2em\" }}>PokÃ©dex</a>\n            <form\n              onSubmit={this.onFormSubmit}\n              className=\"right\"\n              style={{ width: \"70vw\" }}>\n              <div className=\"input-field\">\n                <input\n                  type=\"search\"\n                  id=\"search\"\n                  value={searchTerm}\n                  onChange={this.onInputChange}\n                  autocomplete=\"off\"\n                  placeholder=\"Search Pokemon\"\n                  required\n                />\n                <label\n                  className=\"label-icon\" forHtml=\"search\">\n                  <i className=\"material-icons\">search</i>\n                </label>\n                <i className=\"material-icons\">close</i>\n              </div>\n            </form>\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default PokeSearch;","import React, { Component } from 'react'\nimport { NavLink } from 'react-router-dom';\n\nimport styled from 'styled-components';\nimport '../../assets/Spinner.css';\n\nconst Sprite = styled.img`\n  width: 9em;\n  height: 9em;\n  display: none;\n`;\nconst Card = styled.div`\n  border: solid 1px black;\n  border-radius: 20px;\n  cursor: pointer;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.11), 0 1px 2px rgba(0, 0, 0, 0.22);\n  transition: all 0.2s cubic-bezier(0.25, 0.8, 0.25, 1);\n  &:hover {\n    box-shadow: 0 12px 26px rgba(0, 0, 0, 0.2), 0 1px 2px rgba(0, 0, 0, 0.15);\n  }\n  user-select: none;\n`;\nconst CardList = styled.div`\n  margin-top: 1em;\n`;\n\nclass PokeCard extends Component {\n  state = {\n    name: '',\n    image: '',\n    pokemonId: '',\n    imageLoading: true\n  }\n\n  componentDidMount() {\n    const { name, url } = this.props;\n    // Pokemon ID numbers located in index 6 after split\n    const pokemonId = url.split('/')[6];\n    const image = `https://github.com/PokeAPI/sprites/blob/master/sprites/pokemon/${pokemonId}.png?raw=true`;\n\n    this.setState({\n      name,\n      image,\n    })\n  }\n\n  render() {\n    const { name, image, imageLoading } = this.state;\n\n    return (\n      <CardList className=\"col s6 m3 l2\">\n        <NavLink\n          to={`pokemon/${name}`}\n          style={{ textDecoration: 'none', color: 'black' }}>\n          <Card\n            className=\"card center-align grey darken-3\"\n          >\n\n            {imageLoading ? (\n              <div class=\"triple-spinner\"></div>\n            ) : null}\n            <Sprite\n              src={image}\n              alt={`${name}'s sprite`}\n              className=\"card-image\"\n              onLoad={() => this.setState({ imageLoading: false })}\n              style={imageLoading ? null : { display: 'inline-block' }}\n            />\n\n            <div className=\"card-content grey darken-1 white-text\"\n              style={{ padding: '2px', borderBottomLeftRadius: '20px', borderBottomRightRadius: '20px' }}>\n              {name\n                .toLowerCase()\n                .split(' ')\n                .map(\n                  letter => letter.charAt(0).toUpperCase() + letter.substring(1))\n                .join('')}\n            </div>\n          </Card>\n        </NavLink>\n      </CardList>\n\n    );\n  }\n}\n\nexport default PokeCard;","import axios from 'axios';\n\nconst URL = 'https://pokeapi.co/api/v2';\n\nexport default axios.create({\n  baseURL: URL\n});","import React, { Component, Fragment } from 'react'\nimport PokeSearch from './PokeSearch';\nimport PokeCard from './PokeCard';\n\nimport pokeapi from '../../apis/pokeapi';\n\nclass PokeHome extends Component {\n  state = {\n    originalPokemonList: [],\n    filteredPokemonList: [],\n    pokemonNames: ''\n  }\n\n  async componentDidMount() {\n    const res = await pokeapi.get('/pokemon/?limit=493');\n\n    const pokemonList = res.data['results'];\n    const pokemonNames = res.data['results'].map(item => { return item.name });\n\n    this.setState({\n      originalPokemonList: pokemonList,\n      filteredPokemonList: pokemonList,\n      pokemonNames\n    });\n  }\n\n  filterSearch = (filteredSearchTerm) => {\n    const { originalPokemonList } = this.state;\n    let newFilteredList = [];\n\n    // check if filteredSearchTerm exists\n    filteredSearchTerm\n      // if yes, map original list\n      ? originalPokemonList.map(eachPokemon => {\n        // then check if names are included in filteredSearch Term \n        if (filteredSearchTerm.includes(eachPokemon.name)) {\n          // if included, push to newFilteredList\n          newFilteredList.push(eachPokemon)\n        }\n        // also if included, assign state to the new filtered lists and search term\n        this.setState({\n          filteredPokemonList: newFilteredList,\n        });\n      })\n      // if no search term exists or searchbox is emptied, go back to original list\n      : this.setState({\n        filteredPokemonList: originalPokemonList\n      });\n  }\n\n  render() {\n    const { pokemonNames, filteredPokemonList } = this.state;\n\n    return (\n      <Fragment>\n        <PokeSearch\n          pokemonNames={pokemonNames}\n          filterSearch={this.filterSearch}\n        />\n        <div className=\"container\">\n          <div className=\"row\">\n            {filteredPokemonList\n              ? filteredPokemonList.map((pokemon) => <PokeCard\n                key={pokemon.name}\n                name={pokemon.name}\n                url={pokemon.url}\n              />)\n              : <h3>Loading...</h3>}\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default PokeHome;\n\n","import React, { Component, Fragment } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport pokeapi from '../../apis/pokeapi';\nimport PokeSprite from 'react-poke-sprites';\n\nimport styled from 'styled-components';\nimport pokeball from '../../assets/pokeball.png';\nimport './PokeDetail.css';\nimport '../../assets/Spinner.css';\n\n\nconst TYPE_COLORS = {\n  'bug': '#3C984F',\n  'dark': '#595979',\n  'dragon': '#61CAD9',\n  'electric': '#E0E52A',\n  'fairy': '#EB1169',\n  'fighting': '#EF6038',\n  'fire': '#FC4C5A',\n  'flying': '#49677D',\n  'ghost': '#906790',\n  grass: '#26CB4F',\n  'ground': '#A9702B',\n  'ice': '#D8F0FA',\n  'normal': '#CB98A7',\n  poison: '#785F97',\n  'psychic': '#F81B91',\n  'rock': '#8B3E20',\n  'steel': '#42BD94',\n  'water': '#86A7FB'\n};\n\nconst TypeBadge = styled.div`\n  border-radius: 25px;\n  display: inline;\n  margin-right: 10px;\n  border: 1px solid transparent;\n  width: 5em;\n`\n\nclass PokeDetail extends Component {\n  state = {\n    name: '',\n    pokemonId: '',\n    types: [],\n    height: '',\n    weight: '',\n    description: '',\n    isLoading: true\n  }\n\n  async componentDidMount() {\n    const { pokemonName } = this.props.match.params;\n\n    // URLs\n    const pokemon_URL = await pokeapi.get(`/pokemon/${pokemonName}`);\n    const pokemonSpecies_URL = await pokeapi.get(`/pokemon-species/${pokemonName}`)\n    const pokemonData = pokemon_URL.data;\n    const pokemonSpeciesData = pokemonSpecies_URL.data;\n\n    // Data\n    const name = pokemonData.name\n      .toLowerCase()\n      .split(' ')\n      .map(\n        letter => letter.charAt(0).toUpperCase() + letter.substring(1))\n      .join('');\n    const pokemonId = pokemonData.id;\n\n    const types = pokemonData.types.map(({ type }) => {\n      return type.name\n    })\n    // // decimeters to feet\n    const height = Math.round((pokemonData.height * 0.328084 + 0.00001) * 100) / 100;\n    const weight = pokemonData.weight;\n\n    let description = '';\n    pokemonSpeciesData.flavor_text_entries.some((entry) => {\n      if (entry.language.name === 'en') {\n        description = entry.flavor_text\n        return description.split(\"\\n\");\n      }\n    });\n\n    this.setState({\n      name,\n      pokemonId,\n      types,\n      height,\n      weight,\n      description,\n      isLoading: false\n    });\n  }\n\n  render() {\n    const { name, pokemonId, types, height, weight, description, isLoading } = this.state;\n\n    return (\n      <Fragment>\n        {isLoading\n          ?\n          <div class=\"triple-spinner detail-loading\"></div>\n          : <div className=\"container detail\">\n            <div className=\"button\">\n              <NavLink to={'/'} style={{ textDecoration: 'none', color: 'white', marginTop: '1.5em', fontSize: '18px' }}\n                className=\"btn-floating btn-large waves-effect waves-light red\">\n                {`<`}\n              </NavLink>\n            </div>\n\n            <div className=\"card-image center-align\">\n              <PokeSprite\n                pokemon={`${name}`}\n                className={`${name}-class sprite`}\n              />\n            </div>\n\n            <div className=\"card-content left-align\">\n\n              <div className=\"basic-details\">\n                <div className=\"id\">\n                  <span><img src={pokeball} className=\"icon\" /></span>\n                  {pokemonId < 10 ? `00${pokemonId}` : pokemonId < 100 ? `0${pokemonId}` : pokemonId}\n                </div>\n\n                <div className=\"name\">\n                  {name}\n                </div>\n              </div>\n\n              {types.map(type => (\n                <TypeBadge\n                  key=\"type\"\n                  className=\"types\"\n                  style={{ backgroundColor: `${TYPE_COLORS[type]}`, color: 'white', fontWeight: 'bold', padding: '3px 10px 7px 10px' }}>{type}\n                </TypeBadge>\n              ))}\n\n              <div className=\"specific-details description\">\n                {description}\n                <hr style={{ borderColor: 'rgb(128, 128, 128, 0.5)' }}></hr>\n                <div className=\"height\">\n                  {`Height: ${height} ft.  Weight: ${weight} kg.`}\n                </div>\n              </div>\n            </div>\n          </div>\n        }\n      </Fragment>\n    )\n  }\n}\n\nexport default PokeDetail;","import React, { Component } from 'react';\nimport PokeHome from './components/home/PokeHome';\nimport PokeDetail from './components/details/PokeDetail';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path='/' component={PokeHome} />\n          <Route path='/pokemon/:pokemonName' component={PokeDetail} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}